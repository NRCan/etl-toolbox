name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Ruff Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - path: ./nrcan_etl_toolbox/etl_logging
            name: Logging
          - path: ./nrcan_etl_toolbox/database
            name: Database
          - path: ./nrcan_etl_toolbox/etl_toolbox/reader
            name: Data Reader
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - run: pip install ruff
      - name: Ruff check -- ${{ matrix.target.name }}
        run: ruff check ${{ matrix.target.path }} --output-format=github

  format:
    name: Ruff Format Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - path: ./nrcan_etl_toolbox/etl_logging
            name: Logging
          - path: ./nrcan_etl_toolbox/database
            name: Database
          - path: ./nrcan_etl_toolbox/etl_toolbox/reader
            name: Data Reader
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: pip install ruff
      - name: Ruff format -- ${{ matrix.target.name }}
        run: ruff format --check ${{ matrix.target.path }}

  test:
    name: Test package
    runs-on: ubuntu-latest
    needs: [lint, format]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
      - run: pip install poetry
      - run: poetry install
      - run: python -m pytest -v tests/

  build:
    name: Build and publish package
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: pip install poetry
      - run: poetry install
      - run: poetry build
      - name: Publish to PyPI
        if: github.ref == 'refs/heads/main'
        run: poetry publish -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPI_PASSWORD }}

  delete-pypi-package:
    name: Delete PyPI package (manual)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Delete package script
        run: |
          echo "Suppression manuelle du package PyPI à implémenter via l’API PyPI ou un script adapté."
.base_ruff_image:
  stage: test

  rules:
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: "$CI_PIPELINE_SOURCE == 'push' && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # RUN QUALITY JOB IN PIPELINE ON THE DEFAULT BRANCH(BUT NOT IN OTHER BRANCH)

  interruptible: true
  image:
    name: ghcr.io/astral-sh/ruff:0.11.8-alpine

  before_script:
    - cd $CI_PROJECT_DIR
    - ruff --version


Ruff Check -- Logging:
  extends: .base_ruff_image
  script:
    - ruff check ./etl_logging --fix --output-format=gitlab > code-quality-report_etl_logging.json

  artifacts:
    reports:
      codequality: $CI_PROJECT_DIR/code-quality-report_etl_logging.json

Ruff Format -- Logging:
  extends: .base_ruff_image
  script:
    - ruff format --diff ./etl_logging

Ruff Check -- Database:
  extends: .base_ruff_image
  script:
    - ruff check ./database --fix --output-format=gitlab > code-quality-report_database.json

  artifacts:
    reports:
      codequality: $CI_PROJECT_DIR/code-quality-report_database.json

Ruff Format -- Database:
  extends: .base_ruff_image
  script:
    - ruff format ./database

build_package:
  stage: build
  image: python:3.12  # Utilisation d'une image avec Python installé
  script:
    - pip install poetry
    - poetry config repositories.gitlab "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi"
    - poetry config http-basic.gitlab gitlab-ci-token "$CI_JOB_TOKEN"
    - poetry config virtualenvs.create false  
    - poetry install 
    - poetry build  # Construire le package (génère un wheel et une source distribution dans le dossier dist/)
    - poetry publish --repository gitlab
  artifacts:
    paths:
      - dist/  # Le dossier généré contenant les packages

